{"ast":null,"code":"// src/api/index.ts\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  // або твій бекенд URL\n  timeout: 10000\n});\nexport default api;\nconst API_BASE = 'http://localhost:5000';\nexport const predictSolubility = async smiles => {\n  const response = await axios.post(`${API_BASE}/predict`, {\n    smiles\n  });\n  return response.data;\n};\nexport const fetchHistory = async () => {\n  const response = await axios.get(`${API_BASE}/history`);\n  return response.data;\n};\nexport const trainModel = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const response = await axios.post(`${API_BASE}/train`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport const fetchMetrics = async () => {\n  const response = await axios.get(`${API_BASE}/metrics`);\n  return response.data;\n};\nexport const fetchImportance = async () => {\n  const response = await axios.get(`${API_BASE}/importance`);\n  return response.data;\n};\nexport const fetchDistribution = async () => {\n  const response = await axios.get(`${API_BASE}/distribution`);\n  return response.data;\n};\nexport async function getFeatureImportance() {\n  const res = await fetch('/feature-importance');\n  if (!res.ok) throw new Error('Failed to fetch feature importance');\n  return await res.json();\n}\nexport async function getDistribution() {\n  const res = await fetch('/distribution');\n  if (!res.ok) throw new Error('Failed to fetch distribution');\n  return await res.json();\n}\nexport async function getCheckedMolecules() {\n  const res = await fetch('/checked-molecules');\n  if (!res.ok) throw new Error('Failed to fetch checked molecules');\n  return res.json();\n}","map":{"version":3,"names":["axios","api","create","baseURL","timeout","API_BASE","predictSolubility","smiles","response","post","data","fetchHistory","get","trainModel","file","formData","FormData","append","headers","fetchMetrics","fetchImportance","fetchDistribution","getFeatureImportance","res","fetch","ok","Error","json","getDistribution","getCheckedMolecules"],"sources":["D:/курсова/ChemSolveProject/frontend/src/api/index.ts"],"sourcesContent":["// src/api/index.ts\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000', // або твій бекенд URL\r\n  timeout: 10000,\r\n});\r\n\r\nexport default api;\r\n\r\n\r\nconst API_BASE = 'http://localhost:5000';\r\n\r\nexport const predictSolubility = async (smiles: string) => {\r\n  const response = await axios.post(`${API_BASE}/predict`, { smiles });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchHistory = async () => {\r\n  const response = await axios.get(`${API_BASE}/history`);\r\n  return response.data;\r\n};\r\n\r\nexport const trainModel = async (file: File) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  const response = await axios.post(`${API_BASE}/train`, formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchMetrics = async () => {\r\n  const response = await axios.get(`${API_BASE}/metrics`);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchImportance = async () => {\r\n  const response = await axios.get(`${API_BASE}/importance`);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchDistribution = async () => {\r\n  const response = await axios.get(`${API_BASE}/distribution`);\r\n  return response.data;\r\n};\r\n\r\nexport async function getFeatureImportance() {\r\n  const res = await fetch('/feature-importance');\r\n  if (!res.ok) throw new Error('Failed to fetch feature importance');\r\n  return await res.json();\r\n}\r\n\r\nexport async function getDistribution() {\r\n  const res = await fetch('/distribution');\r\n  if (!res.ok) throw new Error('Failed to fetch distribution');\r\n  return await res.json();\r\n}\r\n\r\nexport async function getCheckedMolecules() {\r\n  const res = await fetch('/checked-molecules');\r\n  if (!res.ok) throw new Error('Failed to fetch checked molecules');\r\n  return res.json();\r\n}\r\n\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,eAAeH,GAAG;AAGlB,MAAMI,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,MAAc,IAAK;EACzD,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGJ,QAAQ,UAAU,EAAE;IAAEE;EAAO,CAAC,CAAC;EACpE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMH,QAAQ,GAAG,MAAMR,KAAK,CAACY,GAAG,CAAC,GAAGP,QAAQ,UAAU,CAAC;EACvD,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG,MAAOC,IAAU,IAAK;EAC9C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,MAAMN,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGJ,QAAQ,QAAQ,EAAEU,QAAQ,EAAE;IAC/DG,OAAO,EAAE;MAAE,cAAc,EAAE;IAAsB;EACnD,CAAC,CAAC;EACF,OAAOV,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMX,QAAQ,GAAG,MAAMR,KAAK,CAACY,GAAG,CAAC,GAAGP,QAAQ,UAAU,CAAC;EACvD,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMZ,QAAQ,GAAG,MAAMR,KAAK,CAACY,GAAG,CAAC,GAAGP,QAAQ,aAAa,CAAC;EAC1D,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMW,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAMb,QAAQ,GAAG,MAAMR,KAAK,CAACY,GAAG,CAAC,GAAGP,QAAQ,eAAe,CAAC;EAC5D,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,eAAeY,oBAAoBA,CAAA,EAAG;EAC3C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qBAAqB,CAAC;EAC9C,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;EAClE,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeC,eAAeA,CAAA,EAAG;EACtC,MAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC;EACxC,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeE,mBAAmBA,CAAA,EAAG;EAC1C,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;EAC7C,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EACjE,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}