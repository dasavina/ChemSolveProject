{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u043A\\u0443\\u0440\\u0441\\u043E\\u0432\\u0430\\\\ChemSolveProject\\\\frontend\\\\src\\\\pages\\\\Train.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport api from '../api';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Train = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [message, setMessage] = useState('');\n  const [metrics, setMetrics] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const onFileChange = e => {\n    if (e.target.files) {\n      setFile(e.target.files[0]);\n      setMessage('');\n      setMetrics(null);\n    }\n  };\n  const onSubmit = async () => {\n    if (!file) {\n      setMessage('Please select a CSV file');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    setLoading(true);\n    setMessage('');\n    setMetrics(null);\n    try {\n      const response = await api.post('/train', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setMessage(response.data.message || 'Training completed');\n      if (response.data.metrics) {\n        setMetrics(response.data.metrics); // очікуємо формат: { r2_score: [...], rmse: [...], mae: [...] }\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Training failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Формуємо дані для графіка з метрик (при пускаємо, що це історія по епохах)\n  const chartData = metrics ? metrics.r2_score.map((_, idx) => ({\n    epoch: idx + 1,\n    R2: metrics.r2_score[idx],\n    RMSE: metrics.rmse[idx],\n    MAE: metrics.mae[idx]\n  })) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Train Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSubmit,\n      disabled: loading,\n      children: loading ? 'Training...' : 'Start Training'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }, this), metrics && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: 300,\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"epoch\",\n            label: {\n              value: 'Epoch',\n              position: 'insideBottomRight',\n              offset: -5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"R2\",\n            stroke: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"RMSE\",\n            stroke: \"#82ca9d\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"MAE\",\n            stroke: \"#ff7300\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Train, \"a6GYG/4VnADW/EtaYS8Xn8eH1sc=\");\n_c = Train;\nexport default Train;\nvar _c;\n$RefreshReg$(_c, \"Train\");","map":{"version":3,"names":["React","useState","api","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","Train","_s","file","setFile","message","setMessage","metrics","setMetrics","loading","setLoading","onFileChange","e","target","files","onSubmit","formData","FormData","append","response","post","headers","data","error","_error$response","_error$response$data","chartData","r2_score","map","_","idx","epoch","R2","RMSE","rmse","MAE","mae","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","disabled","style","width","height","marginTop","margin","top","right","left","bottom","strokeDasharray","dataKey","label","value","position","offset","stroke","_c","$RefreshReg$"],"sources":["D:/курсова/ChemSolveProject/frontend/src/pages/Train.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport api from '../api';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\r\n} from 'recharts';\r\n\r\nconst Train: React.FC = () => {\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [message, setMessage] = useState('');\r\n  const [metrics, setMetrics] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      setFile(e.target.files[0]);\r\n      setMessage('');\r\n      setMetrics(null);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async () => {\r\n    if (!file) {\r\n      setMessage('Please select a CSV file');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    setLoading(true);\r\n    setMessage('');\r\n    setMetrics(null);\r\n\r\n    try {\r\n      const response = await api.post('/train', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n\r\n      setMessage(response.data.message || 'Training completed');\r\n      if (response.data.metrics) {\r\n        setMetrics(response.data.metrics); // очікуємо формат: { r2_score: [...], rmse: [...], mae: [...] }\r\n      }\r\n    } catch (error: any) {\r\n      setMessage(error.response?.data?.error || 'Training failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Формуємо дані для графіка з метрик (при пускаємо, що це історія по епохах)\r\n  const chartData = metrics ? metrics.r2_score.map((_, idx: number) => ({\r\n    epoch: idx + 1,\r\n    R2: metrics.r2_score[idx],\r\n    RMSE: metrics.rmse[idx],\r\n    MAE: metrics.mae[idx],\r\n  })) : [];\r\n\r\n  return (\r\n    <div>\r\n      <h2>Train Model</h2>\r\n      <input type=\"file\" accept=\".csv\" onChange={onFileChange} />\r\n      <button onClick={onSubmit} disabled={loading}>\r\n        {loading ? 'Training...' : 'Start Training'}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n\r\n      {metrics && (\r\n        <div style={{ width: '100%', height: 300, marginTop: 20 }}>\r\n          <ResponsiveContainer>\r\n            <LineChart\r\n              data={chartData}\r\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"epoch\" label={{ value: 'Epoch', position: 'insideBottomRight', offset: -5 }} />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line type=\"monotone\" dataKey=\"R2\" stroke=\"#8884d8\" />\r\n              <Line type=\"monotone\" dataKey=\"RMSE\" stroke=\"#82ca9d\" />\r\n              <Line type=\"monotone\" dataKey=\"MAE\" stroke=\"#ff7300\" />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Train;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}